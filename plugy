#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status.
# Treat unset variables as an error.
# The return value of a pipeline is the exit status of the last command
# that returned a non-zero exit status, or zero if all commands succeeded.
set -euo pipefail

# Define the base directory for your plugins
PLUGINS_DIR="$HOME/.config/plugy"

# --- Create plugin directory if it doesn't exist ---
# This ensures 'find' won't fail with "No such file or directory"
mkdir -p "$PLUGINS_DIR"

# --- Function to display help message ---
show_help() {
    echo "Usage: $(basename "$0") [OPTIONS] <plugin_name> [target...]"
    echo ""
    echo "Run a custom makefile plugin from $PLUGINS_DIR/"
    echo ""
    echo "Options:"
    echo "  -l, --list             List available plugins."
    echo "  -i, --install <name> <url> Install a plugin from a URL."
    echo "  -r, --remove <name>    Remove an installed plugin."
    echo "  -e, --edit <name>      Open a plugin's Makefile in \$EDITOR."
    echo "  -h, --help             Display this help message."
    echo "  -L, --license          Display the license blurb."
    echo ""
    exit 0
}

# --- Function to list available plugins ---
list_plugins() {
    echo "Available plugins in $PLUGINS_DIR/ (call with 'plugy <plugin_name>'):"

    local plugin_names=()
    while IFS= read -r -d $'\0' full_path; do
        filename=$(basename "$full_path")
        plugin_name="${filename%.mk}"
        if [[ "$filename" == *.mk ]]; then
            plugin_names+=("$plugin_name")
        fi
    done < <(find "$PLUGINS_DIR" -maxdepth 1 -type f -name "*.mk" -print0)

    if [ ${#plugin_names[@]} -eq 0 ]; then
        echo "  No plugins found. Create .mk files in $PLUGINS_DIR/"
    else
        IFS=$'\n' sorted_plugins=($(sort <<<"${plugin_names[*]}"))
        printf "  %s\n" "${sorted_plugins[@]}"
    fi
    echo ""
    exit 0
}

# --- Function to install a plugin ---
install_plug() {
    local name="$1"
    local url="$2"

    if [[ -z "$name" || -z "$url" ]]; then
        echo "Error: --install requires a plugin name and a URL." >&2
        echo "Usage: $(basename "$0") -i <plugin_name> <url_to_mk_file>" >&2
        exit 1
    fi

    local dest="$PLUGINS_DIR/${name}.mk"

    if [[ -e "$dest" ]]; then
        echo "Error: Plugin '$name' already exists at $dest" >&2
        exit 1
    fi

    echo "Installing plugin '$name' from $url..."
    curl -fsSL --retry 3 --max-time 10 "$url" -o "$dest" || {
        echo "Error: Failed to download plugin from $url" >&2
        exit 1
    }

    echo "✅ Plugin '$name' installed to: $dest"
    echo "Make sure to run plugy -e $name to update the config"
    echo "Run it with: $(basename "$0") $name"
    exit 0
}

# --- Function to uninstall a plugin ---
uninstall_plug() {
    local name="$1"
    if [[ -z "$name" ]]; then
        echo "Error: --remove requires a plugin name." >&2
        echo "Usage: $(basename "$0") --remove <plugin_name>" >&2
        exit 1
    fi
    local dest_mk="$PLUGINS_DIR/${name}.mk"

    local removed_any=0

    if [[ -f "$dest_mk" ]]; then
        echo "Removing plugin makefile '$name' from $dest_mk..."
        if rm -v "$dest_mk"; then
            echo "✅ Plugin makefile '$name' removed."
            removed_any=1
        else
            echo "Error: Failed to remove plugin makefile '$name'." >&2
            exit 1
        fi
    fi
    
    if [ "$removed_any" -eq 0 ]; then
        echo "Error: Plugin '$name' (.mk file) not found." >&2
        exit 1
    fi
    exit 0
}

# --- Function to edit a plugin ---
edit() {
    local plugin_file="$PLUGINS_DIR/$1.mk"
    if [[ ! -f "$plugin_file" ]]; then
        echo "Error: Plugin '$1' not found at $plugin_file" >&2
        exit 1
    fi

    "${EDITOR:-nano}" "$plugin_file"
}

# --- Function to display license info ---
show_license() {
    cat << 'EOF'
plugy Plugin Manager
Copyright (c) 2025 Eli Thrash

Licensed under the GNU General Public License v3.0 (GPLv3).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
EOF
    exit 0
}

# --- Argument Parsing ---
PARSED_OPTIONS=$(getopt -n "$0" -o lihLr:e: --long "list,install:,help,license,remove:,edit:" -- "$@")

if [ $? -ne 0 ]; then
    echo "Error: Invalid option." >&2
    show_help
fi

eval set -- "$PARSED_OPTIONS"

while true; do
    case "$1" in
        -l|--list)
            list_plugins
            ;;
        -i|--install)
            install_plug "$2" "$3"
            shift 3
            ;;
        -r|--remove)
            uninstall_plug "$2"
            shift 2
            ;;
        -e|--edit)
            edit "$2"
            exit 0
            ;;
        -h|--help)
            show_help
            ;;
        -L|--license)
            show_license
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Internal error: unrecognized option '$1'" >&2
            exit 1
            ;;
    esac
done

# Run plugin if plugin name is provided (positional argument)
if [ $# -eq 0 ]; then
    show_help
fi

PLUGIN_NAME="$1"
PLUGIN_PATH="$PLUGINS_DIR/$PLUGIN_NAME.mk"

if [[ ! -f "$PLUGIN_PATH" ]]; then
    echo "Error: Plugin makefile '$PLUGIN_PATH' not found." >&2
    echo "Please ensure the .mk file exists in $PLUGINS_DIR." >&2
    echo "Use 'plugy -l' to see available plugins or 'plugy -h' for help." >&2
    exit 1
fi

shift

make -f "$PLUGIN_PATH" "$@"

if [ $? -ne 0 ]; then
    echo "Error: Plugin '$PLUGIN_NAME' execution failed. Check the plugin's output above." >&2
    exit 1
fi
